{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","onShowClick","selectedTodo","className","map","todo","id","completed","classNames","title","type","onClick","TodoFilter","onSelect","onInputUpdate","onInputClear","input","onChange","event","currentTarget","value","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getTodos","getUser","userId","Loader","TodoModal","onModalClose","useState","isLoading","setLoading","user","setUser","useEffect","cancel","a","fetchedUser","fetchUser","href","email","name","App","setTodos","setSelectedTodo","filterString","setFilterString","filterState","setFilterState","fetchedTodos","fetchTodos","filterStatePredicate","renderedTodos","useMemo","filter","toLowerCase","includes","undefined","ReactDOM","render","document","getElementById"],"mappings":"2QAUaA,EAA4B,SAAC,GAAD,IACvCC,EADuC,EACvCA,MACAC,EAFuC,EAEvCA,YACAC,EAHuC,EAGvCA,aAHuC,OAKvC,wBAAOC,UAAU,+BAAjB,UACE,gCACE,+BACE,mCACA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAGjB,uCACA,wCAIJ,gCACGH,GAASA,EAAMI,KAAI,SAAAC,GAAI,OACtB,qBACE,UAAQ,OACRF,UAAU,GAFZ,UAKE,oBAAIA,UAAU,eAAd,SAA8BE,EAAKC,KAClCD,EAAKE,UACJ,oBAAIJ,UAAU,eAAd,SACE,sBAAMA,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAGd,oBAAIA,UAAU,iBACnB,oBAAIA,UAAU,2BAAd,SACE,mBACEA,UAAWK,IACTH,EAAKE,UAAY,mBAAqB,mBAF1C,SAKGF,EAAKI,UAGV,oBAAIN,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACVO,KAAK,SACLC,QAAS,kBAAMV,EAAYI,IAJ7B,SAME,sBAAMF,UAAU,OAAhB,UACe,OAAZD,QAAY,IAAZA,OAAA,EAAAA,EAAcI,MAAOD,EAAKC,GACzB,mBAAGH,UAAU,qBACX,mBAAGA,UAAU,uBA7BlBE,EAAKC,aCzBPM,EAAuB,SAAC,GAAD,IAClCC,EADkC,EAClCA,SACAC,EAFkC,EAElCA,cACAC,EAHkC,EAGlCA,aACAC,EAJkC,EAIlCA,MAJkC,OAMlC,uBAAMb,UAAU,mBAAhB,UACE,mBAAGA,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,yBACE,UAAQ,eACRc,SAAU,SAAAC,GAAK,OAAIL,EAASK,EAAMC,cAAcC,QAFlD,UAIE,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,YAAd,8BAKN,oBAAGjB,UAAU,qDAAb,UACE,uBACE,UAAQ,cACRO,KAAK,OACLP,UAAU,QACVkB,YAAY,YACZD,MAAOJ,EACPC,SAAU,SAAAC,GAAK,OAAIJ,EAAcI,EAAMC,cAAcC,UAEvD,sBAAMjB,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAGda,GACC,sBAAMb,UAAU,gBAAgBmB,MAAO,CAAEC,cAAe,OAAxD,SACE,wBACE,UAAQ,oBACR,aAAW,eACXb,KAAK,SACLP,UAAU,SACVQ,QAASI,aCrCrB,SAASS,EAAOC,GAEd,IARYC,EAQNC,EAVS,iEAUYF,EAAM,QAEjC,OAVYC,EAUA,IATL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OASnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,UAGd,IAAMC,EAAW,kBAAMX,EAAY,WAE7BY,EAAU,SAACC,GAAD,OAAoBb,EAAG,iBAAiBa,KCpBlDC,G,MAAmB,kBAC9B,qBAAKnC,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCMNoC,EAA6B,SAAC,GAAoC,IAAlCrC,EAAiC,EAAjCA,aAAcsC,EAAmB,EAAnBA,aACzD,EAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwBF,qBAAxB,mBAAOG,EAAP,KAAaC,EAAb,KAuBA,OArBAC,qBAAU,WACR,IAAIC,GAAS,EADC,4CAGd,4BAAAC,EAAA,6DACEL,GAAW,GADb,SAE4BP,EAAQlC,EAAamC,QAFjD,OAEQY,EAFR,OAIOF,GACHF,EAAQI,GAGVN,GAAW,GARb,4CAHc,sBAgBd,OAhBc,mCAcdO,GAEO,WACLH,GAAS,KAEV,IAGD,sBAAK5C,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBAEduC,EACC,cAAC,EAAD,IAEA,sBAAKvC,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,qBACEA,UAAU,0CACV,UAAQ,eAFV,yBAIYD,EAAaI,MAIzB,wBACEI,KAAK,SACLP,UAAU,SACV,UAAQ,cACRQ,QAAS6B,OAIb,sBAAKrC,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,SACGD,EAAaO,QAGhB,oBAAGN,UAAU,QAAQ,UAAQ,aAA7B,UACGD,EAAaK,UACZ,wBAAQJ,UAAU,mBAAlB,kBACE,wBAAQA,UAAU,kBAAlB,qBAEH,OAED,mBAAGgD,KAAI,wBAAYP,QAAZ,IAAYA,OAAZ,EAAYA,EAAMQ,OAAzB,gBACGR,QADH,IACGA,OADH,EACGA,EAAMS,oBC9DVC,EAAgB,WAC3B,MAA0Bb,mBAAiB,IAA3C,mBAAOzC,EAAP,KAAcuD,EAAd,KACA,EAAgCd,oBAAS,GAAzC,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwCF,qBAAxC,mBAAOvC,EAAP,KAAqBsD,EAArB,KACA,EAAwCf,mBAAS,IAAjD,mBAAOgB,EAAP,KAAqBC,EAArB,KACA,EAAsCjB,mBAAS,IAA/C,mBAAOkB,EAAP,KAAoBC,EAApB,KAEAd,qBAAU,WACR,IAAIC,GAAS,EADC,4CAGd,4BAAAC,EAAA,6DACEL,GAAW,GADb,SAE6BR,IAF7B,OAEQ0B,EAFR,OAIOd,GACHQ,EAASM,GAGXlB,GAAW,GARb,4CAHc,sBAgBd,OAhBc,mCAcdmB,GAEO,WACLf,GAAS,KAEV,IAEH,IAAMgB,EAAuB,SAAC1D,GAC5B,OAAQsD,GACN,IAAK,SACH,OAAQtD,EAAKE,UACf,IAAK,YACH,OAAOF,EAAKE,UACd,QACE,OAAO,IAQPyD,EAAgBC,mBAAQ,kBAAkBjE,EAH7CkE,QAAO,SAAA7D,GAAI,OAAIA,EAAKI,MAAM0D,cAAcC,SAASX,EAAaU,kBAC9DD,OAAOH,KAE8C,CAACN,EAAcE,EAAa3D,IAMpF,OACE,qCACE,qBAAKG,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CACEW,cAAe4C,EACf3C,aAAc,kBAAM2C,EAAgB,KACpC7C,SAAU+C,EACV5C,MAAOyC,MAIX,qBAAKtD,UAAU,QAAf,SACGuC,EACC,cAAC,EAAD,IAEA,cAAC,EAAD,CACE1C,MAAOgE,EACP9D,aAAcA,EACdD,YAAauD,aAQxBtD,GACC,cAAC,EAAD,CACEA,aAAcA,EACdsC,aAtCiB,WACvBgB,OAAgBa,UCvDpBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d09605ca.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  selectedTodo?: Todo,\n  onShowClick: (todo: Todo) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onShowClick,\n  selectedTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos && todos.map(todo => (\n        <tr\n          data-cy=\"todo\"\n          className=\"\"\n          key={todo.id}\n        >\n          <td className=\"is-vcentered\">{todo.id}</td>\n          {todo.completed ? (\n            <td className=\"is-vcentered\">\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </td>\n          ) : (<td className=\"is-vcentered\" />)}\n          <td className=\"is-vcentered is-expanded\">\n            <p\n              className={classNames(\n                todo.completed ? 'has-text-success' : 'has-text-danger',\n              )}\n            >\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => onShowClick(todo)}\n            >\n              <span className=\"icon\">\n                {selectedTodo?.id === todo.id ? (\n                  <i className=\"far fa-eye-slash\" />\n                ) : <i className=\"far fa-eye\" />}\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","import { FC } from 'react';\n\ntype Props = {\n  onInputUpdate: (input: string) => void,\n  onInputClear: () => void,\n  onSelect: (option: string) => void,\n  input: string,\n};\n\nexport const TodoFilter:FC<Props> = ({\n  onSelect,\n  onInputUpdate,\n  onInputClear,\n  input,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          onChange={event => onSelect(event.currentTarget.value)}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={input}\n        onChange={event => onInputUpdate(event.currentTarget.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {input && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          <button\n            data-cy=\"clearSearchButton\"\n            aria-label=\"Clear search\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={onInputClear}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  selectedTodo: Todo,\n  onModalClose: () => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({ selectedTodo, onModalClose }) => {\n  const [isLoading, setLoading] = useState(true);\n  const [user, setUser] = useState<User>();\n\n  useEffect(() => {\n    let cancel = false;\n\n    async function fetchUser() {\n      setLoading(true);\n      const fetchedUser = await getUser(selectedTodo.userId);\n\n      if (!cancel) {\n        setUser(fetchedUser);\n      }\n\n      setLoading(false);\n    }\n\n    fetchUser();\n\n    return () => {\n      cancel = true;\n    };\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onModalClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { Loader } from './components/Loader';\nimport { TodoModal } from './components/TodoModal';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setLoading] = useState(true);\n  const [selectedTodo, setSelectedTodo] = useState<Todo>();\n  const [filterString, setFilterString] = useState('');\n  const [filterState, setFilterState] = useState('');\n\n  useEffect(() => {\n    let cancel = false;\n\n    async function fetchTodos() {\n      setLoading(true);\n      const fetchedTodos = await getTodos();\n\n      if (!cancel) {\n        setTodos(fetchedTodos);\n      }\n\n      setLoading(false);\n    }\n\n    fetchTodos();\n\n    return () => {\n      cancel = true;\n    };\n  }, []);\n\n  const filterStatePredicate = (todo: Todo) => {\n    switch (filterState) {\n      case 'active':\n        return !todo.completed;\n      case 'completed':\n        return todo.completed;\n      default:\n        return true;\n    }\n  };\n\n  const filterTodos = (todoList: Todo[]) => todoList\n    .filter(todo => todo.title.toLowerCase().includes(filterString.toLowerCase()))\n    .filter(filterStatePredicate);\n\n  const renderedTodos = useMemo(() => filterTodos(todos), [filterString, filterState, todos]);\n\n  const handleModalClose = () => {\n    setSelectedTodo(undefined);\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                onInputUpdate={setFilterString}\n                onInputClear={() => setFilterString('')}\n                onSelect={setFilterState}\n                input={filterString}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={renderedTodos}\n                  selectedTodo={selectedTodo}\n                  onShowClick={setSelectedTodo}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          onModalClose={handleModalClose}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}